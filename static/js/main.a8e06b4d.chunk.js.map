{"version":3,"sources":["Components/Form.js","Components/Item.js","Components/TasksList.js","Components/EventsList.js","Components/App.js","serviceWorker.js","index.js"],"names":["Form","props","state","toDoItem","description","type","done","changeType","bind","changeDescription","addItem","e","opt","target","value","this","setState","chg","preventDefault","onSubmit","className","name","onChange","checked","required","placeholder","React","Component","Item","item","onClick","doneItem","role","aria-label","TasksList","items","filter","map","key","EventsList","App","toDoItems","setItemAsDone","oldItem","newItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a8e06b4d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport class Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { toDoItem: {description: '', type:'task', done: false}}\n\n    this.changeType = this.changeType.bind(this);\n    this.changeDescription = this.changeDescription.bind(this)\n    this.addItem = this.addItem.bind(this)\n\n  }\n\n  changeType(e) {\n    const opt = e.target.value;\n    this.setState({\n      toDoItem: {\n        ...this.state.toDoItem,\n        type: opt\n      }\n    })\n  }\n\n  changeDescription(e) {\n    const chg = e.target.value\n    this.setState({\n      toDoItem: {\n        ...this.state.toDoItem,\n        description: chg\n      }\n    })\n  }\n  \n  addItem(e) {\n    e.preventDefault()\n    this.props.addItem(this.state.toDoItem)\n  } // llamada a addItem de App\n\n\n  render() {\n    return(\n      <form onSubmit={this.addItem}>\n        <div className=\"radio\">\n          <label>\n            <input type=\"radio\" value=\"task\" name=\"to do type\" onChange={this.changeType} \n            checked={this.state.toDoItem.type === 'task'} \n            />task\n          </label>\n          <label>\n            <input type=\"radio\" value=\"event\" name=\"to do type\" onChange={this.changeType} \n            checked={this.state.toDoItem.type === 'event'} \n            />event\n          </label>\n        </div>\n\n        <label className=\"enter-task-wrap\">\n        <p className=\"p\">Enter your to do task or event:</p>\n          <textarea className=\"text-area\" required onChange={this.changeDescription} placeholder=\"Do the laundry, Dad's birthday...\">\n            {this.state.toDoItem.description}  \n          </textarea>\n        </label>\n        <input className=\"submit-button\" type='submit' value='add to list'/>\n      </form>\n    )\n  }\n}\n\nForm.propTypes = {\n  addItem: PropTypes.func\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport class Item extends React.Component{\n\n  render() {\n    return(\n      <div className=\"wrap-items\">\n        <div className=\"item\">\n          <p>{this.props.item.description}</p>\n        </div>\n\n        <div className=\"button\">\n          {this.props.item.done? '✅':  \n        <button className=\"done-button\" onClick={() => this.props.doneItem(this.props.item)}>\n          <span role=\"img\" aria-label=\"tick\">✅</span>\n          </button>}\n        </div>\n      </div>\n    )\n  }\n}\n\nItem.propTypes = {\n  item: PropTypes.object\n}","import React from 'react';\nimport { Item } from './Item';\nimport PropTypes from 'prop-types';\n\n\nexport class TasksList extends React.Component {\n\n  render(){\n    return(\n      <div className=\"to-do-list-tasks\">\n        <h2>Tasks</h2>\n        {\n          this.props.items\n          .filter(item => item.type==='task')\n          .map((item, key)=> {\n          return <Item item={item} key={key}\n          doneItem={this.props.doneItem}/>\n          })\n        }\n      </div>\n    )\n  }\n}\n  \nTasksList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object)\n}","import React from 'react';\nimport { Item } from './Item';\nimport PropTypes from 'prop-types';\n\n\nexport class EventsList extends React.Component {\n  \n  render(){\n    return(\n      <div className=\"to-do-list-events\">\n        <h2>Events</h2>\n        {\n          this.props.items\n          .filter(item => item.type==='event')\n          .map((item, key)=> {\n          return <Item item={item} key={key}\n          doneItem={this.props.doneItem}/>\n          })\n        }\n      </div>\n    )\n  }\n}\n\nEventsList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object)\n}","import React from 'react';\n\nimport './App.css';\nimport { Form } from './Form';\nimport { TasksList } from './TasksList';\nimport { EventsList } from './EventsList';\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = { \n      toDoItems:[/*{\n        description: '',\n        type: \"event\",\n        done: false\n      }*/]\n    }\n    this.addItem = this.addItem.bind(this);\n    this.setItemAsDone = this.setItemAsDone.bind(this)\n  }\n\n  addItem(item) {\n    this.setState({\n      toDoItems:[ ...this.state.toDoItems, { ...item } ]\n    });\n  }\n\n  setItemAsDone(oldItem) {\n    const newItem = {\n      ...oldItem,\n      done: true\n    } //creamos esta variable para remarcar que el item sobre el que ha hecho click el usuario ahora cambia la propiedad 'done' en true.\n    this.setState({\n      toDoItems:[\n        ...this.state.toDoItems.filter(item => item !== oldItem), newItem\n      ]\n    });\n  }\n\n  render(){\n    return (\n      <div className=\"app\">\n        <h1>TO DO LIST</h1>\n        <div className=\"form\">\n          <Form addItem={this.addItem}/>\n        </div>\n        <div className=\"tasks-and-events\">\n          <TasksList items={this.state.toDoItems} \n          doneItem={this.setItemAsDone} />\n          <EventsList items={this.state.toDoItems}\n          doneItem={this.setItemAsDone} />\n        </div>\n      </div>\n    )\n    }\n  }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}